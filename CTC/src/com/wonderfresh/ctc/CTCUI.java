package com.wonderfresh.ctc;

import com.wonderfresh.commons.Block;

//import com.wonderfresh.mbo.Mbo;
//@author Sarah
public class CTCUI extends javax.swing.JFrame {

    int mode;
    int simspeed;
    javax.swing.JTable redtable;
    SimpleTrack strak;
    double tputval;
    int ntrains;

//    Mbo mbo;
    public CTCUI() {
        initComponents();
        redtable = new javax.swing.JTable();
        strak = new SimpleTrack();
        strak.loadTrack();
        mode = 0;
        tputval = 0;
        ntrains = 0;
//        mbo = new Mbo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        speedgroup = new javax.swing.ButtonGroup();
        modegroup = new javax.swing.ButtonGroup();
        tabpane = new javax.swing.JTabbedPane();
        trainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        trainTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        editTrainTable = new javax.swing.JTable();
        pictureOfTrain = new javax.swing.JLabel();
        trainButtonPanel = new javax.swing.JPanel();
        trainUpdateButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        dispatchButton = new javax.swing.JButton();
        blockPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        blockTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        editBlockTable = new javax.swing.JTable();
        blockButtonPanel = new javax.swing.JPanel();
        blockUpdateButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        chooseLine = new javax.swing.JComboBox<>();
        switchPanel2 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        switchTable2 = new javax.swing.JTable();
        toggleButton2 = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        editSwitchTable2 = new javax.swing.JTable();
        assortedFunctionsPanel = new javax.swing.JPanel();
        speedpanel = new javax.swing.JPanel();
        oneXButton = new javax.swing.JRadioButton();
        tenXButton = new javax.swing.JRadioButton();
        modepanel = new javax.swing.JPanel();
        manualButton = new javax.swing.JRadioButton();
        fboButton = new javax.swing.JRadioButton();
        mboButton = new javax.swing.JRadioButton();
        throughpanel = new javax.swing.JPanel();
        throughput = new javax.swing.JLabel();
        schedulepanel = new javax.swing.JPanel();
        schedulefile = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabpane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        trainPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        trainTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        trainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Train", "Block", "Set Speed", "Authority", "Destination", "ID#"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        trainTable.setGridColor(new java.awt.Color(250, 250, 250));
        trainTable.setSelectionBackground(new java.awt.Color(14, 159, 251));
        trainTable.setShowGrid(false);
        trainTable.setShowHorizontalLines(true);
        jScrollPane1.setViewportView(trainTable);

        editTrainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Train to Edit", "Set Speed", "Authority", "Destination"
            }
        ));
        editTrainTable.setAutoscrolls(false);
        editTrainTable.setGridColor(new java.awt.Color(250, 250, 250));
        editTrainTable.setRowSelectionAllowed(false);
        editTrainTable.setSelectionBackground(new java.awt.Color(14, 159, 251));
        jScrollPane2.setViewportView(editTrainTable);

        trainUpdateButton.setText("Update");
        trainUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainUpdateButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        dispatchButton.setText("Dispatch");
        dispatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dispatchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout trainButtonPanelLayout = new javax.swing.GroupLayout(trainButtonPanel);
        trainButtonPanel.setLayout(trainButtonPanelLayout);
        trainButtonPanelLayout.setHorizontalGroup(
            trainButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, trainButtonPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(dispatchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trainUpdateButton))
        );
        trainButtonPanelLayout.setVerticalGroup(
            trainButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trainButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(trainButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trainUpdateButton)
                    .addComponent(removeButton)
                    .addComponent(dispatchButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout trainPanelLayout = new javax.swing.GroupLayout(trainPanel);
        trainPanel.setLayout(trainPanelLayout);
        trainPanelLayout.setHorizontalGroup(
            trainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(trainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(trainPanelLayout.createSequentialGroup()
                        .addGap(412, 412, 412)
                        .addComponent(pictureOfTrain))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(trainPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(trainButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        trainPanelLayout.setVerticalGroup(
            trainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(trainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(trainPanelLayout.createSequentialGroup()
                        .addComponent(trainButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(pictureOfTrain)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(trainPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        tabpane.addTab("tab1", trainPanel);

        blockPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        blockTable.setBackground(new java.awt.Color(245, 255, 245));
        blockTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        blockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"GA", "Open", "54", "1", "55", "n/a", "n/a"},
                {"GB", "Closed", "0", "0", "55", "down", "on"},
                {"GC", "Open", "15", "1", "75", "n/a", "n/a"}
            },
            new String [] {
                "Block", "Open", "Set Speed", "Authority", "Speed Limit", "Crossing", "Light"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        blockTable.setGridColor(new java.awt.Color(250, 250, 250));
        blockTable.setSelectionBackground(new java.awt.Color(14, 159, 251));
        blockTable.setShowGrid(false);
        blockTable.setShowHorizontalLines(true);
        jScrollPane3.setViewportView(blockTable);

        editBlockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Block to Edit", "Set Speed", "Authority"
            }
        ));
        editBlockTable.setAutoscrolls(false);
        editBlockTable.setGridColor(new java.awt.Color(250, 250, 250));
        editBlockTable.setRowSelectionAllowed(false);
        editBlockTable.setSelectionBackground(new java.awt.Color(14, 159, 251));
        jScrollPane4.setViewportView(editBlockTable);

        blockUpdateButton.setText("Update");
        blockUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockUpdateButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        chooseLine.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Green Line", "Red Line" }));
        chooseLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseLineActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout blockButtonPanelLayout = new javax.swing.GroupLayout(blockButtonPanel);
        blockButtonPanel.setLayout(blockButtonPanelLayout);
        blockButtonPanelLayout.setHorizontalGroup(
            blockButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, blockButtonPanelLayout.createSequentialGroup()
                .addComponent(openButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blockUpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chooseLine, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(72, Short.MAX_VALUE))
        );
        blockButtonPanelLayout.setVerticalGroup(
            blockButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blockButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(blockButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(blockUpdateButton)
                    .addComponent(closeButton)
                    .addComponent(openButton)
                    .addComponent(chooseLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout blockPanelLayout = new javax.swing.GroupLayout(blockPanel);
        blockPanel.setLayout(blockPanelLayout);
        blockPanelLayout.setHorizontalGroup(
            blockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blockPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(blockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(blockPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(blockButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        blockPanelLayout.setVerticalGroup(
            blockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blockPanelLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(blockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blockButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tabpane.addTab("tab2", blockPanel);

        switchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        switchTable2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        switchTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"0", "RB", "RA", "RW"},
                {"1", "GD", "GO", "GS"},
                {"2", "GZZ", "GY", "GX"}
            },
            new String [] {
                "Switch ID", "Home Block", "Connected", "Disconnected"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        switchTable2.setGridColor(new java.awt.Color(250, 250, 250));
        switchTable2.setSelectionBackground(new java.awt.Color(14, 159, 251));
        switchTable2.setShowGrid(false);
        switchTable2.setShowHorizontalLines(true);
        jScrollPane9.setViewportView(switchTable2);

        toggleButton2.setText("Toggle");
        toggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleButton2ActionPerformed(evt);
            }
        });

        editSwitchTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Selected Switch"
            }
        ));
        editSwitchTable2.setAutoscrolls(false);
        editSwitchTable2.setGridColor(new java.awt.Color(250, 250, 250));
        editSwitchTable2.setRowSelectionAllowed(false);
        editSwitchTable2.setSelectionBackground(new java.awt.Color(14, 159, 251));
        jScrollPane10.setViewportView(editSwitchTable2);

        javax.swing.GroupLayout switchPanel2Layout = new javax.swing.GroupLayout(switchPanel2);
        switchPanel2.setLayout(switchPanel2Layout);
        switchPanel2Layout.setHorizontalGroup(
            switchPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(switchPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(switchPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(switchPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 338, Short.MAX_VALUE))
        );
        switchPanel2Layout.setVerticalGroup(
            switchPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(switchPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(switchPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(toggleButton2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabpane.addTab("tab3", switchPanel2);

        assortedFunctionsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        speedpanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Simulation Speed", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        speedgroup.add(oneXButton);
        oneXButton.setSelected(true);
        oneXButton.setText("x1");
        oneXButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneXButtonActionPerformed(evt);
            }
        });

        speedgroup.add(tenXButton);
        tenXButton.setText("x10");
        tenXButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tenXButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout speedpanelLayout = new javax.swing.GroupLayout(speedpanel);
        speedpanel.setLayout(speedpanelLayout);
        speedpanelLayout.setHorizontalGroup(
            speedpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(speedpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(oneXButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tenXButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        speedpanelLayout.setVerticalGroup(
            speedpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(speedpanelLayout.createSequentialGroup()
                .addGroup(speedpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oneXButton)
                    .addComponent(tenXButton))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        modepanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mode", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        modegroup.add(manualButton);
        manualButton.setSelected(true);
        manualButton.setText("Manual");
        manualButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualButtonActionPerformed(evt);
            }
        });

        modegroup.add(fboButton);
        fboButton.setText("Fixed Block Auto");
        fboButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fboButtonActionPerformed(evt);
            }
        });

        modegroup.add(mboButton);
        mboButton.setText("MBO");
        mboButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mboButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout modepanelLayout = new javax.swing.GroupLayout(modepanel);
        modepanel.setLayout(modepanelLayout);
        modepanelLayout.setHorizontalGroup(
            modepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modepanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modepanelLayout.createSequentialGroup()
                        .addComponent(mboButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(modepanelLayout.createSequentialGroup()
                        .addGroup(modepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(manualButton)
                            .addComponent(fboButton))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        modepanelLayout.setVerticalGroup(
            modepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modepanelLayout.createSequentialGroup()
                .addComponent(manualButton)
                .addGap(4, 4, 4)
                .addComponent(fboButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mboButton)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        throughpanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Throughput", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        throughput.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        throughput.setText("0 trains/hour");

        javax.swing.GroupLayout throughpanelLayout = new javax.swing.GroupLayout(throughpanel);
        throughpanel.setLayout(throughpanelLayout);
        throughpanelLayout.setHorizontalGroup(
            throughpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(throughpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(throughput)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        throughpanelLayout.setVerticalGroup(
            throughpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(throughpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(throughput)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        schedulepanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Loaded Schedule", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        schedulefile.setText("sched.txt");
        schedulefile.setToolTipText("");

        javax.swing.GroupLayout schedulepanelLayout = new javax.swing.GroupLayout(schedulepanel);
        schedulepanel.setLayout(schedulepanelLayout);
        schedulepanelLayout.setHorizontalGroup(
            schedulepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedulepanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(schedulefile)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        schedulepanelLayout.setVerticalGroup(
            schedulepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedulepanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(schedulefile)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout assortedFunctionsPanelLayout = new javax.swing.GroupLayout(assortedFunctionsPanel);
        assortedFunctionsPanel.setLayout(assortedFunctionsPanelLayout);
        assortedFunctionsPanelLayout.setHorizontalGroup(
            assortedFunctionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assortedFunctionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(assortedFunctionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(speedpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(modepanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(throughpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(schedulepanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        assortedFunctionsPanelLayout.setVerticalGroup(
            assortedFunctionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assortedFunctionsPanelLayout.createSequentialGroup()
                .addComponent(throughpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(speedpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(modepanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(schedulepanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabpane.addTab("tab4", assortedFunctionsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabpane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabpane, javax.swing.GroupLayout.PREFERRED_SIZE, 415, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void trainUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainUpdateButtonActionPerformed
        int rowfound;
        String values[]; //train name, speed, authority, destination

        //get user-entered strings from edit table
        values = getValues(4);

        //if any strings are null, error and return
        if (foundNull(values)) {
            return;
        }

        //remove extraneous spaces from strings
        values = trimAll(values);

        //display errors and get row to update
        boolean isUpdating = true;
        boolean isTrain = true;
        rowfound = entryErrorCheck(values, isUpdating, isTrain);

        //talk to any other modules?
        //MBO interface has this:
        //mboTrain[] setUpdatedSpeedAuthority(int trainID, double speed, double authority, mboTrain[] array);
        //ask whether this means what i think it means
        //that the MBO uses this info for its own scheduling
        //would go like this:
        //trainarray = setUpdatedSpeedAuthority(rowfound, values[1], values[2], trainarray);
        //track controller, on the other hand
        //would get updates on a block-by-block basis
        //so nothing from this train-related update
        //how train-based speed and authority relate to block-by-block updates:
        //this info is associated with the train
        //when a train reaches a block, send it to that block
        //what if it takes too long to send the message?
        //what if train enters block and briefly has wrong info?
        //send it to upcoming block?
        //what if other train is there, and gets wrong info?
        //authority might be what lets the train know it can keep going
        //even though the start of a block might momentarily have eg. speed 0
        //if no errors, update train table
        if (rowfound >= 0) {
            trainTable.setValueAt(values[0], rowfound, 0); //name
            trainTable.setValueAt("GA", rowfound, 1); //shb block the train is in
            trainTable.setValueAt(values[1], rowfound, 2); //speed
            trainTable.setValueAt(values[2], rowfound, 3); //authority
            trainTable.setValueAt(values[3], rowfound, 4); //destination
            //don't update id#
        }
    }//GEN-LAST:event_trainUpdateButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int rowfound;

        String trainName = (String) editTrainTable.getValueAt(0, 0);

        //error and return if string is null
        if (trainName == null) {
            javax.swing.JOptionPane.showMessageDialog(null, "Enter value in field 0.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        //remove extraneous spaces
        trainName = trainName.trim();

        //look for train in view table
        Boolean isTrain = true;
        rowfound = findmatchingrow(trainName, isTrain);

        //error and return if row not found
        if (rowfound < 0) {
            javax.swing.JOptionPane.showMessageDialog(null, "Name not found", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        //tell MBO to remove train?
        //ask about this
        //remove row if found
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) trainTable.getModel();
        model.removeRow(rowfound);
        ntrains--;
    }//GEN-LAST:event_removeButtonActionPerformed

    private void dispatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispatchButtonActionPerformed
        String values[]; //train name, speed, authority, destination

        //get user-entered strings from edit table
        values = getValues(4);

        //if any strings are null, error and return
        if (foundNull(values)) {
            return;
        }

        //remove extraneous spaces from strings
        values = trimAll(values);

        //display errors
        boolean isUpdating = false;
        boolean isTrain = true;
        int errd = entryErrorCheck(values, isUpdating, isTrain);

        //if no errors, call Track Controller
        //tell it I'm dispatching a train
        //Track Controller interface currently has no function for this
        //ask about that
        //if not Track Controller, call Track Model
        //their interface doesn't have this either
        //okay
        //ask about that
        //call Train Model?
        //no
        //Train Controller?
        //no
        //MBO?
        //yes
        //mboTrain[] setDispatchedTrain(int trainID, double speed, double authority,mboTrain[] array);
        //mboTrain[] sentDispatch = setDispatchedTrain(rowfound, values[1], values[2], ???);
        //Ah yes. The MBO stores active trains in an array.
        //And expects other modules to do the same.
        //I'll make a (global?) array of mboTrains for this.
        //and a function for replacing the array with a bigger one
        //if there are too many trains
        //10 seems like a safe minimum size for trainarray.
        //reduce size when train removed, but never below array size 10
        //or just have size = # blocks and don't change it (easier)
        //to dispatch train, add the new train to trainarray
        //then send trainarray with setDispatched Train
        //so:
        //trainarray = setDispatchedTrain(rowfound, values[1], values[2], trainarray);
        //assuming this function returns the updated array
        //how to check for success?
        //ask about this
        //they're discussing how to dispatch right now
        //pretty sure I'd call the trackcontroller
        //startTrain(line, speed, authority) from trackcontroller CTCDataAccess
        //if no errors, update train table
        if (errd >= 0) {
            //add a new row to the train table
            javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) trainTable.getModel();
            int rowCount = model.getRowCount();
            model.addRow(new Object[]{"", "", "", "", "", ""});

            trainTable.setValueAt(values[0], rowCount, 0);
            trainTable.setValueAt("GA", rowCount, 1); //shb block the train is in
            trainTable.setValueAt(values[1], rowCount, 2);
            trainTable.setValueAt(values[2], rowCount, 3);
            trainTable.setValueAt(values[3], rowCount, 4);
            trainTable.setValueAt(rowCount, rowCount, 5); //shb the id given back?
            ntrains++;
        }
    }//GEN-LAST:event_dispatchButtonActionPerformed

    private void blockUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockUpdateButtonActionPerformed
        String values[]; //block name, speed, authority

        //get user-entered strings from edit table
        values = getValues(3);

        //if any strings are null, error and return
        if (foundNull(values)) {
            return;
        }

        //remove extraneous spaces from strings
        values = trimAll(values);

        //display errors
        boolean isUpdating = true;
        boolean isTrain = false;
        int rowfound = entryErrorCheck(values, isUpdating, isTrain);

        //if no errors, call Track Controller
        //boolean setSetSpeed(int block, int speed);
        //would be something like:
        //boolean speedSuccess = setSetSpeed(rowfound, Integer.parseInt(values[1]));
        //assuming block can be represented as its index in the table
        //but can we trust that we store blocks at the same index?
        //and blocks in the two lines will have identical indexes
        //ask about this
        //may need to agree to identifying block by name, not id#
        //or I may need a way to calculate id#
        //and then:
        //public boolean setAuthority(int block, int authority);
        //boolean authSuccess = setAuthority(rowfound, Integer.parseInt(values[2]));
        //update table if both are success
        //i'm guessing returning true is success
        //if no errors, update train table
        if (rowfound >= 0) {
            //ctc can only update these values
            blockTable.setValueAt(values[1], rowfound, 2); //speed
            blockTable.setValueAt(values[2], rowfound, 3); //authority
        }
    }//GEN-LAST:event_blockUpdateButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        boolean isOpening = false;
        closeOrOpenBlock(isOpening);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        boolean isOpening = true;
        closeOrOpenBlock(isOpening);
    }//GEN-LAST:event_openButtonActionPerformed

    private void chooseLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseLineActionPerformed
        //switches block table to display blocks from selected line
        //changes table color
        if (chooseLine.getSelectedIndex() == 0) {
            blockTable.setBackground(new java.awt.Color(245, 255, 245)); //a light green
        } else {
            blockTable.setBackground(new java.awt.Color(255, 245, 245)); //a light red
        }
    }//GEN-LAST:event_chooseLineActionPerformed

    private void toggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleButton2ActionPerformed
        String switchID = (String) editSwitchTable2.getValueAt(0, 0);

        if (switchID == null) {
            javax.swing.JOptionPane.showMessageDialog(null, "Enter value in field 0.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        //error if bad ID
        switchID = switchID.trim();
        int rowcount = switchTable2.getRowCount();
        int idRow;
        try {
            idRow = Integer.parseInt(switchID);
            if ((idRow < 0) || (idRow >= rowcount)) {
                javax.swing.JOptionPane.showMessageDialog(null, "ID not found.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException nfe) {
            javax.swing.JOptionPane.showMessageDialog(null, "Invalid ID", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        //who to talk to about switches?
        //Track Controller interface has no function for them
        //neither does MBO
        //neither does Track Model
        //ask about this
        //index to the given row in the switch table, and swap values
        String blockSwap = (String) switchTable2.getValueAt(idRow, 2);
        switchTable2.setValueAt((String) switchTable2.getValueAt(idRow, 3), idRow, 2);
        switchTable2.setValueAt(blockSwap, idRow, 3);
    }//GEN-LAST:event_toggleButton2ActionPerformed

    private void fboButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fboButtonActionPerformed
        mode = 1;
    }//GEN-LAST:event_fboButtonActionPerformed

    private void oneXButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneXButtonActionPerformed
        simspeed = 1;
    }//GEN-LAST:event_oneXButtonActionPerformed

    private void tenXButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tenXButtonActionPerformed
       simspeed = 10;
    }//GEN-LAST:event_tenXButtonActionPerformed

    private void manualButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualButtonActionPerformed
        mode = 0;
    }//GEN-LAST:event_manualButtonActionPerformed

    private void mboButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mboButtonActionPerformed
        mode = 2;
    }//GEN-LAST:event_mboButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel assortedFunctionsPanel;
    private javax.swing.JPanel blockButtonPanel;
    private javax.swing.JPanel blockPanel;
    private javax.swing.JTable blockTable;
    private javax.swing.JButton blockUpdateButton;
    private javax.swing.JComboBox<String> chooseLine;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton dispatchButton;
    private javax.swing.JTable editBlockTable;
    private javax.swing.JTable editSwitchTable2;
    private javax.swing.JTable editTrainTable;
    private javax.swing.JRadioButton fboButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JRadioButton manualButton;
    private javax.swing.JRadioButton mboButton;
    private javax.swing.ButtonGroup modegroup;
    private javax.swing.JPanel modepanel;
    private javax.swing.JRadioButton oneXButton;
    private javax.swing.JButton openButton;
    private javax.swing.JLabel pictureOfTrain;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel schedulefile;
    private javax.swing.JPanel schedulepanel;
    private javax.swing.ButtonGroup speedgroup;
    private javax.swing.JPanel speedpanel;
    private javax.swing.JPanel switchPanel2;
    private javax.swing.JTable switchTable2;
    private javax.swing.JTabbedPane tabpane;
    private javax.swing.JRadioButton tenXButton;
    private javax.swing.JPanel throughpanel;
    private javax.swing.JLabel throughput;
    private javax.swing.JButton toggleButton2;
    private javax.swing.JPanel trainButtonPanel;
    private javax.swing.JPanel trainPanel;
    private javax.swing.JTable trainTable;
    private javax.swing.JButton trainUpdateButton;
    // End of variables declaration//GEN-END:variables

    //check for errors, add error description to message when applicable
    //returns -1 if errors found
    //returns matching row if no errors
    public int entryErrorCheck(String[] values, boolean isUpdating, boolean isTrain) {
        //values: name, speed, authority, destination
        String message = "";
        int errd = 0, rowfound = -1;

        if (isTrain) {
            //check whether yard block has train
            //mytrack should be regularly updated with
            //public boolean getTrainPresence(int block);
            //from the track controller
            //i believe, anyway
            //message += "A train is already occupying the dispatch block.\n";
            //errd++;

            //compare destination to block names, error if no match
            //just go through both line tables
            //i'll need a search function that does both
            //or maybe just remove the destination field
            //it might be pointless
            //message += "Destination must be a block name, eg. GA.\n";
            //errd++;
            //(max name length hardcoded for now because it's not too important)
            if (values[0].length() > 255) {
                message += "Name too long.\n";
                errd++;
            }
        }

        //check whether a row in display table contains name
        rowfound = findmatchingrow(values[0], isTrain);

        //if name not found and caller is updating an existing entry
        if (isUpdating && (rowfound < 0)) {
            message += "Couldn't find name.\n";
            errd++;
        } //if name found and caller is adding a new entry
        else if (!isUpdating && (rowfound >= 0)) {
            message += "Name already in use.\n";
            errd++;
        } //if name not found and caller is adding a new entry
        else if (!isUpdating && (rowfound < 0)) {
            //so it doesn't return an error
            rowfound = 0;
        }

        //error if speed isn't a number, or is negative
        if (!isPositiveNumber(values[1])) {
            message += "Speed must be a positive numerical value.\n";
            errd++;
        }

        //error if speed > speed limit for the block
        //just get speed limit from mytrack
        //if updating block, compare to the block you're updating
        //if updating train, compare to the block it's in
        //either way, get from Track Controller
        //public int getSpeedLimit(int block);
        //int speedlim = getSpeedLimit( blockid );
        //message += "Can't exceed speed limit.\n";
        //errd++;
        //error if authority isn't a number, or is negative
        if (!isPositiveNumber(values[2])) {
            message += "Authority must be a positive numerical value.\n";
            errd++;
        }

        //display any errors found
        if (errd > 0) {
            javax.swing.JOptionPane.showMessageDialog(null, message, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return -1;
        }

        //return row if no errors
        return rowfound;
    }

    //returns all user-entered values from train or block edit table
    public String[] getValues(int numvals) {
        String values[] = new String[numvals];

        //if train
        if (numvals == 4) {
            values[0] = (String) editTrainTable.getValueAt(0, 0); //row, column
            values[1] = (String) editTrainTable.getValueAt(0, 1);
            values[2] = (String) editTrainTable.getValueAt(0, 2);
            values[3] = (String) editTrainTable.getValueAt(0, 3);
        } //else if block
        else if (numvals == 3) {
            values[0] = (String) editBlockTable.getValueAt(0, 0); //row, column
            values[1] = (String) editBlockTable.getValueAt(0, 1);
            values[2] = (String) editBlockTable.getValueAt(0, 2);
        }

        return values;
    }

    //errors and returns true if a string is null
    public boolean foundNull(String[] strs) {
        int i;
        String message;

        for (i = 0; i < strs.length; i++) {
            if (strs[i] == null) {
                message = "Enter value in field " + i + ".\n";
                javax.swing.JOptionPane.showMessageDialog(null, message, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return true;
            }
        }

        return false;
    }

    //removes starting and ending whitespace from strings in array
    public String[] trimAll(String strs[]) {
        int i;

        for (i = 0; i < strs.length; i++) {
            strs[i] = strs[i].trim();
        }

        return strs;
    }

    //returns index of row that matches key
    //returns -1 if key not found
    public int findmatchingrow(String key, Boolean isTrain) {
        int i;

        if (isTrain) {
            int rowcount = trainTable.getRowCount();
            for (i = 0; i < rowcount; i++) {
                if (key.compareTo((String) trainTable.getValueAt(i, 0)) == 0) {
                    return i;
                }
            }
        } else {
            int rowcount = blockTable.getRowCount();
            for (i = 0; i < rowcount; i++) {
                if (key.compareTo((String) blockTable.getValueAt(i, 0)) == 0) {
                    return i;
                }
            }
        }

        return -1;
    }

    //returns true if string is a positive number
    //false if negative, or not a number
    //slow, so not meant for frequent use
    public boolean isPositiveNumber(String str) {
        double num;

        try {
            num = Double.parseDouble(str);
            if (num < 0) {
                return false;
            }
        } catch (NumberFormatException nfe) {
            return false;
        }

        return true;
    }

    public void closeOrOpenBlock(boolean isOpening) {
        String blockName = (String) editBlockTable.getValueAt(0, 0);

        //error and return if string is null
        if (blockName == null) {
            javax.swing.JOptionPane.showMessageDialog(null, "Enter value in field 0", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        //remove extraneous spaces
        blockName = blockName.trim();

        //get row to edit
        Boolean isTrain = false;
        int rowfound = findmatchingrow(blockName, isTrain);

        //error and return if block not found
        if (rowfound < 0) {
            javax.swing.JOptionPane.showMessageDialog(null, "Name not found.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        //call Track Controller
        //public boolean setBlockOpen(int block, boolean open);
        //i'm guessing set open to true if opening block
        //false if closing
        //and proceed if it returns true?
        //MBO also wants to know that block is closing/opening
        //just tell track controller to close a hardcoded block: E4, green
        //just set block E4 on green line to closed
//        Block tempblock = greenLine.getBlock("Green", 19);
//        tempblock.closeBlock();
        //if block found, open or closed as requested
        if (isOpening) {
            blockTable.setValueAt("Open", rowfound, 1);
        } else {
            blockTable.setValueAt("Closed", rowfound, 1);
        }

    }

    //returns the set speed the CTC believes this block currently has
    public int getSetSpeed(String line, int block) {
        if (0 == line.compareTo("Green")) {
            return strak.mytrack.getGreenLine().getBlock(line, block).getSetPointSpeed();
        }
        return strak.mytrack.getRedLine().getBlock(line, block).getSetPointSpeed();
    }

    //informs CTC of a change in the track.
    public void setSetSpeed(String line, int block, int speed) {
        if (0 == line.compareTo("Green")) {
            strak.mytrack.getGreenLine().getBlock(line, block).setSetPointSpeed(speed);
        }
        strak.mytrack.getRedLine().getBlock(line, block).setSetPointSpeed(speed);
    }

    //returns the authority the CTC believes this block currently has
    public double getAuthority(String line, int block) {
        if (0 == line.compareTo("Green")) {
            return strak.mytrack.getGreenLine().getBlock(line, block).getAuthority();
        }
        return strak.mytrack.getRedLine().getBlock(line, block).getAuthority();
    }

    //informs CTC of a change in the track.
    public void getAuthority(String line, int block, double auth) {
        if (0 == line.compareTo("Green")) {
            strak.mytrack.getGreenLine().getBlock(line, block).setAuthority(auth);
        }
        strak.mytrack.getRedLine().getBlock(line, block).setAuthority(auth);
    }

    //returns whether or not the CTC believes a block is open
    public boolean getBlockOpen(String line, int block) {
        if (0 == line.compareTo("Green")) {
            return strak.mytrack.getGreenLine().getBlock(line, block).closed;
        }
        return strak.mytrack.getRedLine().getBlock(line, block).closed;
    }

    //informs CTC of a change in the track.
    public void setBlockOpen(String line, int block, boolean closed) {
        if (0 == line.compareTo("Green")) {
            strak.mytrack.getGreenLine().getBlock(line, block).closed = closed;
        }
        strak.mytrack.getRedLine().getBlock(line, block).closed = closed;
    }

    //0 = manual, 1 = fixed block auto, 2 = MBO
    public int getMode() {
        return mode;
    }

    public int getSimulationSpeed() {
        return simspeed;
    }

    public void initBlockTables() {
        redtable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        redtable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Train", "Block", "Set Speed", "Authority", "Destination", "ID#"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        redtable.setGridColor(new java.awt.Color(250, 250, 250));
        redtable.setSelectionBackground(new java.awt.Color(14, 159, 251));
        redtable.setShowGrid(false);
        redtable.setShowHorizontalLines(true);
        jScrollPane1.setViewportView(redtable);

    }

    public void addToBlockTables(String linetoadd) {
        int i;
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) blockTable.getModel();
        Block tblok;
        String cros, clos;

        if (linetoadd.compareTo("Green") == 0) {
            for (i = 0; i < strak.mytrack.getGreenCount(); i++) {
                tblok = strak.greenLine.getBlock("Green", i);
                if (tblok.isCrossing()) {
                    cros = "Down";
                } else {
                    cros = "Open";
                }
                if (tblok.closed) {
                    clos = "Closed";
                } else {
                    clos = "Open";
                }
                model.addRow(new Object[]{tblok.getBlockNum(), clos, tblok.getSetPointSpeed(), tblok.getAuthority(), tblok.getSpeedLimit(), cros, ""});
            }
        } else {
            for (i = 0; i < strak.mytrack.getRedCount(); i++) {
                tblok = strak.redLine.getBlock("Red", i);
                if (tblok.isCrossing()) {
                    cros = "Down";
                } else {
                    cros = "Open";
                }
                if (tblok.closed) {
                    clos = "Closed";
                } else {
                    clos = "Open";
                }
                model.addRow(new Object[]{tblok.getBlockNum(), clos, tblok.getSetPointSpeed(), tblok.getAuthority(), tblok.getSpeedLimit(), cros, ""});
            }
        }

    }

    public void swapBlockTables(String linetoadd) {
        int i;
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) blockTable.getModel();

        if (linetoadd.compareTo("Green") == 0) {
            for (i = 0; i < strak.mytrack.getRedCount(); i++) {
                model.removeRow(i);
            }
            addToBlockTables(linetoadd);
        } else {
            for (i = 0; i < strak.mytrack.getGreenCount(); i++) {
                model.removeRow(i);
            }
            addToBlockTables(linetoadd);
        }
    }
    
    public void setThroughput(double tput) {
        tputval = tput;
        throughput.setText(tputval + "trains/hour");
    }
    
    //returns array of train ids
    public int[] getMyTrains() {
        int i;
        int[] trains = new int[ntrains];
        
        for (i=0;i<ntrains;i++) {
            trains[i] = Integer.parseInt((String)trainTable.getValueAt(i, 5));
        }
        
        return trains;
    }
}
